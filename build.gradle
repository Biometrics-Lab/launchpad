plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.netflix.dgs.codegen' version '7.0.3'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.bmlab'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(24)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('springCloudVersion', "2025.0.0")
	set('springModulithVersion', "1.4.1")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-integration'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.springframework.data:spring-data-rest-hal-explorer'
	implementation 'org.springframework.integration:spring-integration-http'
	implementation 'org.springframework.integration:spring-integration-jdbc'
	implementation 'org.springframework.integration:spring-integration-jpa'
	implementation 'org.springframework.integration:spring-integration-kafka'
	implementation 'org.springframework.integration:spring-integration-mongodb'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.modulith:spring-modulith-events-api'
	implementation 'org.springframework.modulith:spring-modulith-starter-core'
	implementation 'org.springframework.modulith:spring-modulith-starter-jdbc'
	implementation 'org.springframework.modulith:spring-modulith-starter-jpa'
	implementation 'org.springframework.modulith:spring-modulith-starter-mongodb'
	implementation 'org.springframework.session:spring-session-jdbc'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.springframework.modulith:spring-modulith-actuator'
	runtimeOnly 'org.springframework.modulith:spring-modulith-events-kafka'
	runtimeOnly 'org.springframework.modulith:spring-modulith-observability'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
	testImplementation 'org.springframework.graphql:spring-graphql-test'
	testImplementation 'org.springframework.integration:spring-integration-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:kafka'
	testImplementation 'org.testcontainers:mongodb'
	testImplementation 'org.testcontainers:postgresql'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

generateJava {
	schemaPaths = ["${projectDir}/src/main/resources/graphql-client"]
	packageName = 'com.bmlab.launchpad.codegen'
	generateClient = true
}

tasks.named('bootBuildImage') {
	runImage = 'paketobuildpacks/ubuntu-noble-run-base:latest'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}
